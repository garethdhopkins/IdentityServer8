name: Tagged Release
on:
  push:
    tags:
      - 'v*'
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - uses: dotnet/nbgv@master
        id: nbgv

      - name: Display Package Version
        run: echo "PackageVersion=${{ steps.nbgv.outputs.SemVer2 }}"
        
      - name: Validate Package Version Matches Tag
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          TAG_VERSION="${{ github.ref_name }}"
          TAG_VERSION="${TAG_VERSION#v}"
          
          # Extract version from code
          CODE_VERSION="${{ steps.nbgv.outputs.SemVer2 }}"
          
          echo "Tag version: $TAG_VERSION"
          echo "Code version: $CODE_VERSION"
          
          # Compare versions
          if [ "$TAG_VERSION" != "$CODE_VERSION" ]; then
            echo "Error: Version mismatch between tag ($TAG_VERSION) and code ($CODE_VERSION)"
            echo "Please make sure the PackageVersion in code is the same as the tag name"
            exit 1
          else
            echo "âœ“ Versions match!"
          fi

      - name: Restore dependencies
        run: dotnet restore src/IdentityServer8.sln
      - name: Build
        run: dotnet build src/IdentityServer8.sln --configuration Release --no-restore
      - name: Test
        run: dotnet test src/IdentityServer8.sln --configuration Release --no-build

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        env:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: alexhiggins732/IdentityServer8
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          
      # Add step to pack NuGet packages
      - name: Pack NuGet Packages
        run: dotnet pack src/IdentityServer8.sln --configuration Release --no-build -o nuget -p:PackageVersion=${{ steps.nbgv.outputs.SemVer2 }}
        
      # Package binaries as before
      - name: Package Artifacts
        run: dotnet publish src/IdentityServer8.sln --configuration Release --no-build -o out
      - name: Zip Artifacts
        run: Compress-Archive -Path ./out/* -DestinationPath ./identityserver8_binaries.zip
        shell: pwsh
        
      # Extract tag message with robust approach
      - name: Get tag message
        id: tag-message
        run: |
          echo "Current tag: ${{ github.ref_name }}"
          
          # Try multiple approaches to get annotated tag message
          echo "Attempt 1: Using cat-file to extract tag message"
          TAG_TYPE=$(git cat-file -t ${{ github.ref_name }} || echo "unknown")
          echo "Tag type: $TAG_TYPE"
          
          if [ "$TAG_TYPE" == "tag" ]; then
            # This is an annotated tag, extract its message
            echo "Found annotated tag, extracting message..."
            # Extract tag message, skipping the header
            TAG_MESSAGE=$(git cat-file -p ${{ github.ref_name }} | sed -n '/^$/,$ p' | tail -n +2)
            echo "Message from cat-file: $TAG_MESSAGE"
          else
            echo "Not an annotated tag, trying other methods..."
            
            echo "Attempt 2: Using for-each-ref command"
            TAG_MESSAGE=$(git for-each-ref refs/tags/${{ github.ref_name }} --format='%(contents)')
            echo "Message from for-each-ref: $TAG_MESSAGE"
            
            if [ -z "$TAG_MESSAGE" ]; then
              echo "Attempt 3: Using show command"
              TAG_MESSAGE=$(git show -s --format=%B ${{ github.ref_name }} 2>/dev/null || echo "")
              echo "Message from show: $TAG_MESSAGE"
            fi
          fi
          
          # Final decision - use the tag message if we got one, otherwise use default
          if [ -n "$TAG_MESSAGE" ] && [ "$TAG_MESSAGE" != "${{ github.ref_name }}" ]; then
            echo "Using extracted tag message"
          else
            TAG_MESSAGE="Release ${{ github.ref_name }}"
            echo "Using default message"
          fi
          
          echo "Final tag message: $TAG_MESSAGE"
          
          # Set output
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      # Create a zip of NuGet packages for the release
      - name: Zip NuGet Packages
        run: Compress-Archive -Path ./nuget/*.nupkg -DestinationPath ./identityserver8_nuget_packages.zip
        shell: pwsh
        
      - name: Create Release
        if: ${{ success() }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ steps.tag-message.outputs.message }}
          body: ${{ steps.tag-message.outputs.message }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Upload binaries as before
      - name: Upload Binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./identityserver8_binaries.zip
          asset_name: identityserver8_binaries.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Upload NuGet packages to release
      - name: Upload NuGet Packages
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./identityserver8_nuget_packages.zip
          asset_name: identityserver8_nuget_packages.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Push packages to NuGet.org
      - name: Push to NuGet.org
        run: dotnet nuget push ./nuget/*.nupkg --skip-duplicate --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}